export const teStyles = {
  grid: {
    display: "grid",
    gridTemplateColumns: "3fr 1fr",
    gap: "1rem",
    width: "100%",
    boxSizing: "border-box" as const,
  },
  sidePanelSlot: {
    position: "relative" as const,
    display: "flex",
    alignItems: "stretch",
  },
  sidePanelAnimator: {
    width: "100%",
    display: "flex",
    flexDirection: "column" as const,
    height: "100%",
  },
  graphWrapper: {
    border: "1px solid #e5e7eb",
    borderRadius: ".5rem",
    overflow: "hidden" as const,
    display: "flex",
    flexDirection: "column" as const,
    height: "100%",
    background: "#f8fafc",
  },
  graph: {
    width: "100%",
    flex: 1,
    height: "100%",
    display: "block",
  },
  legend: {
    fontSize: ".75rem",
    color: "#6b7280",
  },
  smallGraph: {
    height: "400px",
  },
  outer: {
    position: "relative" as const,
    display: "flex",
    flexDirection: "column" as const,
    width: "100%",
    boxSizing: "border-box" as const,
    flex: 1,
    minHeight: 0,
  },
  toolbarWrapper: {
    marginBottom: "0.5rem",
  },
  rootTabs: {
    display: "flex",
    gap: ".4rem",
    flexWrap: "wrap" as const,
    marginBottom: "0.75rem",
  },
  mainRow: {
    display: "flex",
    flex: 1,
    minHeight: 0,
    width: "100%",
    alignItems: "stretch" as const,
    gap: "0.5rem",
    height: "100%",
  },
  graphArea: (graphHeight?: number) => ({
    ...teStyles.graphWrapper,
    flex: 1,
    minWidth: 0,
    minHeight: 0,
    height: graphHeight ?? "100%",
    maxHeight: "100%",
    overflow: "hidden" as const,
    position: "relative" as const,
    display: "flex",
    flexDirection: "column" as const,
  }),
  legendAnchor: {
    position: "absolute" as const,
    bottom: 8,
    right: 8,
    pointerEvents: "none" as const,
  },
  sidePanel: (show: boolean, panelWidth: number) => ({
    width: show ? panelWidth : 0,
    transition: "width 240ms ease",
    overflow: "hidden" as const,
    display: "flex",
    flexDirection: "column" as const,
    minHeight: 0,
    boxSizing: "border-box" as const,
    paddingLeft: show ? "0.5rem" : 0,
  }),
  mobileWrapper: {
    marginTop: "0.75rem",
  },
  animatedPanel: (visible: boolean, duration: number) => ({
    transition: `opacity ${duration}ms ease, transform ${duration}ms ease`,
    opacity: visible ? 1 : 0,
    transform: visible ? "translateX(0)" : "translateX(12px)",
    pointerEvents: (visible
      ? "auto"
      : "none") as React.CSSProperties["pointerEvents"],
    height: "100%",
    display: "flex",
    flexDirection: "column" as const,
    overflowY: "auto" as const,
  }),
} as const;
